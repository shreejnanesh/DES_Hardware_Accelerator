
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a>
<a name="2"><q-n>     2  </q-n></a>	<q-w>class</q-w> enc_agent <q-w>extends</q-w> uvm_agent;
<a name="3"><q-n>     3  </q-n></a>	   uvm_sequencer #(enc_seq_item) enc_seqr;
<a name="4"><q-n>     4  </q-n></a>	   enc_driver                enc_drvr;
<a name="5"><q-n>     5  </q-n></a>	   enc_monitor               enc_mon;
<a name="6"><q-n>     6  </q-n></a>	   enc_scoreboard            enc_scbd;
<a name="7"><q-n>     7  </q-n></a>	   enc_coverage_subscriber   enc_cov;
<a name="8"><q-n>     8  </q-n></a>	   uvm_active_passive_enum   is_active;
<a name="9"><q-n>     9  </q-n></a>
<a name="10"><q-n>     10  </q-n></a>	   `uvm_component_utils(enc_agent)
<a name="11"><q-n>     11  </q-n></a>
<a name="12"><q-n>     12  </q-n></a>	   <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name=<q-l>""</q-l>, uvm_component parent);
<a name="13"><q-n>     13  </q-n></a>	      <q-w>super</q-w>.<q-w>new</q-w>(name, parent);
<a name="14"><q-n>     14  </q-n></a>	   <q-w>endfunction</q-w>
<a name="15"><q-n>     15  </q-n></a>
<a name="16"><q-n>     16  </q-n></a>	   <q-w>virtual</q-w> <q-w>function</q-w> <q-w>void</q-w> build_phase(uvm_phase phase);
<a name="17"><q-n>     17  </q-n></a>	     <q-w>if</q-w> (!(uvm_config_db#(uvm_active_passive_enum)::get(<q-w>this</q-w>,<q-l>""</q-l>,<q-l>"active_passive"</q-l>, is_active)) ) <q-w>begin</q-w>
<a name="18"><q-n>     18  </q-n></a>	        `uvm_fatal(<q-l>"FATAL"</q-l>, <q-l>"Can't get active_passive for agent\n"</q-l>);
<a name="19"><q-n>     19  </q-n></a>	     <q-w>end</q-w>
<a name="20"><q-n>     20  </q-n></a>	     <q-w>if</q-w> (is_active == UVM_ACTIVE) <q-w>begin</q-w>
<a name="21"><q-n>     21  </q-n></a>	        enc_seqr = uvm_sequencer#(enc_seq_item)::type_id::create(<q-l>"enc_seqr"</q-l>, <q-w>this</q-w>);
<a name="22"><q-n>     22  </q-n></a>	        enc_drvr = enc_driver::type_id::create(<q-l>"enc_drvr"</q-l>, <q-w>this</q-w>);
<a name="23"><q-n>     23  </q-n></a>	     <q-w>end</q-w>
<a name="24"><q-n>     24  </q-n></a>	     enc_mon = enc_monitor::type_id::create(<q-l>"enc_mon"</q-l>, <q-w>this</q-w>);
<a name="25"><q-n>     25  </q-n></a>	     enc_scbd = enc_scoreboard::type_id::create(<q-l>"enc_scbd"</q-l>, <q-w>this</q-w>);
<a name="26"><q-n>     26  </q-n></a>	     enc_cov = enc_coverage_subscriber::type_id::create(<q-l>"enc_cov"</q-l>, <q-w>this</q-w>);
<a name="27"><q-n>     27  </q-n></a>	   <q-w>endfunction</q-w>
<a name="28"><q-n>     28  </q-n></a>
<a name="29"><q-n>     29  </q-n></a>	   <q-w>virtual</q-w> <q-w>function</q-w> <q-w>void</q-w> connect_phase(uvm_phase phase);
<a name="30"><q-n>     30  </q-n></a>	      <q-w>if</q-w> (is_active == UVM_ACTIVE) <q-w>begin</q-w>
<a name="31"><q-n>     31  </q-n></a>	         enc_drvr.seq_item_port.connect(enc_seqr.seq_item_export);
<a name="32"><q-n>     32  </q-n></a>	      <q-w>end</q-w>
<a name="33"><q-n>     33  </q-n></a>	         enc_mon.ap.connect(enc_scbd.enc_item_collected_export);
<a name="34"><q-n>     34  </q-n></a>	         enc_mon.ap.connect(enc_cov.enc_item_collected_export);
<a name="35"><q-n>     35  </q-n></a>	   <q-w>endfunction</q-w>
<a name="36"><q-n>     36  </q-n></a>
<a name="37"><q-n>     37  </q-n></a>	<q-w>endclass</q-w>
</pre>
</tt>

  
</body>
</html>
